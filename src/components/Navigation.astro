---
import { Image } from "astro:assets";
import JSCebuLogo from "../assets/logo.png";

const navItems = [
  { label: "Home", href: "/" },
  { label: "About", href: "/mission-vision" },
  { label: "Members", href: "/members" },
  { label: "Events", href: "/events" },
  { label: "Projects", href: "/community-projects" },
  { label: "Initiatives", href: "/initiatives" },
  { label: "Blog", href: "/blog" },
];

// const currentPath = Astro.url.pathname;
const rawPath = Astro.url.pathname;

// Normalize server/client paths: keep root "/" but strip trailing slashes for any other path.
// This makes comparisons robust across environments (dev preview, Netlify, etc.)
// e.g. "/mission-vision" === "/mission-vision/" after normalization.
const normalizePath = (p: any) => {
  if (!p) return "/";
  // keep root as "/", strip trailing slashes for others
  return p === "/" ? "/" : p.replace(/\/+$/, "");
};

const currentPath = normalizePath(rawPath);
---

<header class="header">
  <nav class="nav container">
    <a href="/" class="logo">
      <Image src={JSCebuLogo} alt="JavaScript Cebu" />
    </a>

    <button class="mobile-toggle" aria-label="Toggle navigation">
      <span></span>
      <span></span>
      <span></span>
    </button>

    <ul class="nav-list">
      {
        navItems.map((item) => (
          <li>
            <a
              href={item.href}
              class={currentPath === normalizePath(item.href) ? "active" : ""}
              aria-current={
                currentPath === normalizePath(item.href) ? "page" : undefined
              }
            >
              {item.label}
            </a>
          </li>
        ))
      }
    </ul>

    <div class="nav-actions">
      <a href="/official-links" class="social-link" aria-label="Social Links">
        <svg
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"
          ></path>
          <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"
          ></path>
        </svg>
      </a>
      <button class="theme-toggle" aria-label="Toggle theme">
        <svg
          class="sun"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <circle cx="12" cy="12" r="5"></circle>
          <line x1="12" y1="1" x2="12" y2="3"></line>
          <line x1="12" y1="21" x2="12" y2="23"></line>
          <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
          <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
          <line x1="1" y1="12" x2="3" y2="12"></line>
          <line x1="21" y1="12" x2="23" y2="12"></line>
          <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
          <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
        </svg>
        <svg
          class="moon"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
        </svg>
      </button>
    </div>
  </nav>
</header>

<style>
  .header {
    position: sticky;
    top: 0;
    z-index: 100;
    background: var(--color-bg);
    border-bottom: 1px solid var(--color-border);
    backdrop-filter: blur(10px);
    background: color-mix(in srgb, var(--color-bg) 80%, transparent);
  }

  .nav {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 4rem;
    gap: var(--space-lg);
  }

  .logo {
    transition: transform var(--transition-fast);
  }

  .logo:hover {
    transform: scale(1.05);
  }

  .logo svg {
    width: 40px;
    height: 40px;
  }

  .mobile-toggle {
    display: none;
    flex-direction: column;
    gap: 4px;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
  }

  .mobile-toggle span {
    width: 24px;
    height: 2px;
    background: var(--color-text);
    transition: all var(--transition-fast);
  }

  .nav-list {
    display: flex;
    gap: var(--space-xs);
    list-style: none;
    margin: 0;
    padding: 0;
    flex: 1;
    justify-content: center;
  }

  .nav-list a {
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-md);
    color: var(--color-text-secondary);
    font-weight: 500;
    transition: all var(--transition-fast);
    position: relative;
  }

  .nav-list a:hover {
    color: var(--color-text);
    background: var(--color-bg-secondary);
  }

  .nav-list a.active {
    color: var(--color-yellow);
    background: color-mix(in srgb, var(--color-yellow) 10%, transparent);
  }

  .nav-list a.active::after {
    content: "";
    position: absolute;
    bottom: -1px;
    left: var(--space-sm);
    right: var(--space-sm);
    height: 2px;
    background: var(--color-yellow);
    border-radius: 2px;
  }

  .nav-actions {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
  }

  .social-link,
  .theme-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: var(--radius-md);
    background: var(--color-bg-secondary);
    border: 1px solid var(--color-border);
    color: var(--color-text-secondary);
    cursor: pointer;
    transition: all var(--transition-fast);
  }

  .social-link:hover,
  .theme-toggle:hover {
    background: var(--color-bg-tertiary);
    color: var(--color-text);
    transform: translateY(-2px);
  }

  .theme-toggle .sun,
  .theme-toggle .moon {
    position: absolute;
    transition:
      opacity var(--transition-fast),
      transform var(--transition-fast);
  }

  /* Default state (light mode) */
  .theme-toggle .sun {
    opacity: 1;
    transform: rotate(0);
  }

  .theme-toggle .moon {
    opacity: 0;
    transform: rotate(180deg);
  }

  [data-theme="light"] .theme-toggle .sun {
    opacity: 1;
    transform: rotate(0);
  }

  [data-theme="light"] .theme-toggle .moon {
    opacity: 0;
    transform: rotate(180deg);
  }

  [data-theme="dark"] .theme-toggle .sun {
    opacity: 0;
    transform: rotate(180deg);
  }

  [data-theme="dark"] .theme-toggle .moon {
    opacity: 1;
    transform: rotate(0);
  }

  /* Mobile Styles */
  @media (max-width: 768px) {
    .mobile-toggle {
      display: flex;
      z-index: 201;
    }

    .mobile-toggle.active span:nth-child(1) {
      transform: rotate(45deg) translate(5px, 5px);
    }

    .mobile-toggle.active span:nth-child(2) {
      opacity: 0;
    }

    .mobile-toggle.active span:nth-child(3) {
      transform: rotate(-45deg) translate(7px, -6px);
    }

    .nav-list {
      display: none;
      position: fixed;
      top: 4rem;
      left: 0;
      right: 0;
      bottom: 0;
      background: var(--color-bg);
      border-top: 1px solid var(--color-border);
      flex-direction: column;
      padding: var(--space-xl);
      z-index: 200;
      overflow-y: auto;
    }

    .nav-list.active {
      display: flex;
      animation: slideDown 0.3s ease;
    }

    @keyframes slideDown {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .nav-list li {
      width: 100%;
    }

    .nav-list a {
      display: block;
      padding: var(--space-md);
      font-size: 1.125rem;
      border-radius: var(--radius-lg);
    }

    .nav-list a.active::after {
      display: none;
    }

    .nav-actions {
      margin-left: auto;
    }
  }
</style>

<script>
  // Theme toggle
  const themeToggle = document.querySelector(".theme-toggle");
  themeToggle?.addEventListener("click", () => {
    const currentTheme =
      document.documentElement.getAttribute("data-theme") || "light";
    const newTheme = currentTheme === "light" ? "dark" : "light";
    document.documentElement.setAttribute("data-theme", newTheme);
    localStorage.setItem("theme", newTheme);

    // Log for debugging
    console.log(`Theme changed from ${currentTheme} to ${newTheme}`);
  });

  // Mobile menu toggle
  const mobileToggle = document.querySelector(".mobile-toggle");
  const navList = document.querySelector(".nav-list");

  mobileToggle?.addEventListener("click", () => {
    const isActive = navList?.classList.contains("active");

    if (isActive) {
      navList?.classList.remove("active");
      mobileToggle.classList.remove("active");
      document.body.style.overflow = "";
    } else {
      navList?.classList.add("active");
      mobileToggle.classList.add("active");
      document.body.style.overflow = "hidden";
    }
  });

  // Close mobile menu when clicking on a link
  const navLinks = document.querySelectorAll(".nav-list a");
  navLinks.forEach((link) => {
    link.addEventListener("click", () => {
      navList?.classList.remove("active");
      mobileToggle?.classList.remove("active");
      document.body.style.overflow = "";
    });
  });

  // Close mobile menu when resizing to desktop
  window.addEventListener("resize", () => {
    if (window.innerWidth > 768) {
      navList?.classList.remove("active");
      mobileToggle?.classList.remove("active");
      document.body.style.overflow = "";
    }
  });
</script>
